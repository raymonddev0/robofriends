{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","console","log","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","Component","CounterButton","updateCount","setState","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7bc5a2b5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt = 'robot' src = {`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\t\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\t// if (true) {\r\n\t// \tthrow new Error ('NOOOO');\r\n\t// }\r\n\tconsole.log('CardList');\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn ( \r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={robots[i].id} \r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t);\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\tconsole.log(\"searchbox\");\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n\t\t\taria-label='Search Robots'\r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='search robots' \r\n\t\t\tonChange={searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border:'5px solid black', height:'800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.state({hasError:true})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1>Oops. That is not good</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;\r\n\r\n","import React, { Component }\tfrom 'react';\r\n\r\nclass CounterButton extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tcount: 0\r\n\t\t}\r\n\t}\r\n\tshouldComponentUpdate (nextProps, nextState) {\r\n\t\tif (this.state.count !== nextState.count) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n\r\n\tupdateCount = () => {\r\n\t\tthis.setState(state => {\r\n\t\t\treturn ({count: this.state.count + 1})\r\n\t\t})\r\n\t}\r\n\r\n\trender() {\r\n\t\tconsole.log( 'CounterButton');\r\n\t\treturn (\r\n\t\t\t<button color = {this.props.color} onClick = {this.updateCount}>\r\n\t\t\tCount: {this.state.count}\r\n\t\t\t</button>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default CounterButton;","import React, { Component }\tfrom 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n\tshouldComponentUpdate (nextProps, nextState) {\r\n\t\treturn false;\r\n\t}\r\n\trender() {\r\n\t\tconsole.log('Header');\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<CounterButton color={'red'} />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport Header from '../components/Header';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: ()=> dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots()\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot =>{\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t<h1>Loading</h1> :\r\n\t\t(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<Header />\r\n\t\t\t\t<SearchBox searchChange = {onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\t\r\n\t}\t\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING })\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=> response.json())\r\n\t\t.then(data=> dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n\t\t.catch(error=> dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\n//returns an object\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField:action.payload});\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n//returns a function for redux-thunk to act upon it\r\nexport const requestRobots = (state=initialStateRobots, action={})=> {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false}) \r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from  'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}